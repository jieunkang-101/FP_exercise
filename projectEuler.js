// Problem #1
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

function sumOfMultiplesOfThreeOrFive(limitNum) {
  let sum = 0;
  for ( let x = 1; x < limitNum; x ++ ) {
    if ( x % 3 === 0 || x % 5 === 0 ) {
      sum += x;
    }
  }
  return sum;
}

console.log(sumOfMultiplesOfThreeOrFive(1000));
//Answer = 233168


// Problem #2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
//Answer = 4613732

function FibonacciCounter () {
  let evenNumSum = 0;
  num1 = 1;
  num2 = 1;
  function incrementCounter () {
    tempSum = num1 + num2;
    num1 = num2;
    num2 = tempSum;
    if (tempSum%2 == 0) {
      evenNumSum += tempSum;
    }
  }
  while (num2 < 4000000) {
    incrementCounter();
  }
  return evenNumSum;
}

console.log(FibonacciCounter());







// const sumOfMultiplesOfThreeOrFive = () => {
//   const sum =  3 * (Math.floor(999/3)  *  (Math.floor(999/3)+1))/2
//   + 5 * (Math.floor(999/5)  *  (Math.floor(999/5)+1))/2
//   -15 * (Math.floor(999/15) * (Math.floor(999/15)+1))/2;
//   return sum;
// }
//console.log(sumOfMultiplesOfThreeOrFive());


// function fivoEvenSum(value){
//   var sum = 0;
//   var numOne = 1;
//   var numTwo = 1;
//   var tempSum = 0;

//   while (numTwo < value) {
//     tempSum = numOne + numTwo;
//     numOne = numTwo;
//     //console.log("numOne", numOne);
//     //console.log("numTwo",numTwo);
//     numTwo = tempSum;
//     if (numTwo % 2 === 0) {
//       sum += numTwo;
//       console.log("sum", sum);
//     }
//   }
//   return sum;
// }
// console.log(fivoEvenSum(4000000));
